# -*- coding: utf-8 -*-
"""Trabajo Final Finanzas III

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RA3h8zmn6a8d6dQqEmPl1pEAJKnHwY1G

**Trabajo Final Finanzas III**

Integrantes: Macarena Ramos, Constanza Rodriguez, Marcelo Tiznado y Maura Zu√±iga

Instrucciones:

Realizar valoraciones a distintos tipos de activos financieros:

1- Bonos: CONY

2- Acciones: MACA

3- Futuros: MACA

4- Forward: CONY

5- Opciones: CHELO

6- Swaps: CHELO

7- Fra: MAU

8- Otro instrumento financiero: MAU



Estructura del trabajo:

1-
. El trabajo debe ser realizado en el sitio web de colaboratory de Python y
debe contener los c√≥digos y librer√≠as necesarias para que ejecute la valoraci√≥n
de cada uno de los activos descritos anteriormente. Para esto puede utilizar
un ejemplo o ejercicio del libro o bien ocupar un ejercicio de la clase.
Son 7 tipos de activos financieros (1 punto por cada activo) y debe mostrar los
c√°lculos, gr√°ficas obtenidos y un documento que resuma los datos
(rentabilidades, riesgo, seg√∫n corresponda).

# **1.- Bonos**

**Ejercicio 1: Valoraci√≥n de un Bono Corportivo de Tesla**
Sup√≥n que deseas calcular el valor de un bono emitido por Tesla Inc.. El bono tiene las siguientes caracter√≠sticas:

Valor nominal (
ùëâ
ùëõ
V
n
‚Äã
 ): 1,000 USD

Tasa de cup√≥n (
ùê∂
C): 5.3% anual

Fecha de emisi√≥n: 18 de agosto de 2017

Fecha de vencimiento: 15 de agosto de 2025

Frecuencia de pagos de cupones: Semestral (dos pagos al a√±o)

Precio actual del bono (
ùëÉ
0
‚Äã
 ): 1,026.40 USD (seg√∫n datos hist√≥ricos)

Tasa de descuento (
ùëü
r): 5% anual (tasa de rendimiento requerida en el mercado)

A√±os restantes hasta el vencimiento: 4 a√±os
"""

# Instalar librer√≠as necesarias si no est√°n instaladas
!pip install matplotlib pandas numpy

# Importar librer√≠as
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

# ------------------------
# PARTE 1: PAR√ÅMETROS DEL BONO
# ------------------------

valor_nominal = 1000                     # Valor nominal del bono
tasa_cupon = 0.053                       # Tasa de cup√≥n anual (5.3%)
frecuencia_pago = 2                      # Semestral
cupon = valor_nominal * tasa_cupon / frecuencia_pago
precio_actual_bono = 1026.40            # Precio actual en el mercado
anos_restantes = 4
tasa_descuento = 0.05                   # Tasa de descuento (5% anual)
n = anos_restantes * frecuencia_pago    # N√∫mero de pagos restantes

# ------------------------
# PARTE 2: C√ÅLCULO DEL PRECIO TE√ìRICO
# ------------------------

flujos_cupon = np.array([cupon / (1 + tasa_descuento / frecuencia_pago)**i for i in range(1, n + 1)])
valor_presente_vn = valor_nominal / (1 + tasa_descuento / frecuencia_pago)**n
precio_teorico_bono = np.sum(flujos_cupon) + valor_presente_vn

# ------------------------
# PARTE 3: INDICADORES FINANCIEROS
# ------------------------

ytm_aprox = frecuencia_pago * (cupon + (valor_nominal - precio_actual_bono) / n) / ((valor_nominal + precio_actual_bono) / 2)
cy = (cupon * frecuencia_pago) / precio_actual_bono

# ------------------------
# PARTE 4: SIMULACI√ìN DE PRECIOS EN EL TIEMPO
# ------------------------

fechas = pd.to_datetime(['2017-08-18', '2018-08-18', '2019-08-18', '2020-08-18',
                         '2021-08-18', '2022-08-18', '2023-08-18', '2024-08-18', '2025-07-15'])

tasas_estimadas = [0.053, 0.058, 0.065, 0.060, 0.048, 0.055, 0.070, 0.060, tasa_descuento]
precios_est = []

for i, r in enumerate(tasas_estimadas):
    n_restantes = max(1, (len(tasas_estimadas) - i) * frecuencia_pago // len(tasas_estimadas) * anos_restantes)
    pagos = [cupon / (1 + r / frecuencia_pago)**t for t in range(1, n_restantes + 1)]
    valor_final = valor_nominal / (1 + r / frecuencia_pago)**n_restantes
    precios_est.append(sum(pagos) + valor_final)

df = pd.DataFrame({
    'Fecha': fechas,
    'Precio Estimado del Bono': precios_est
})

# ------------------------
# PARTE 5: TABLA DE RESUMEN
# ------------------------

resumen = pd.DataFrame({
    'Precio Actual': [precio_actual_bono],
    'Precio Te√≥rico': [precio_teorico_bono],
    'Current Yield (%)': [cy * 100],
    'YTM Aproximado (%)': [ytm_aprox * 100]
})

# ------------------------
# PARTE 6: GR√ÅFICO DEL BONO
# ------------------------

plt.figure(figsize=(14, 7))
plt.plot(df['Fecha'], df['Precio Estimado del Bono'], color='navy', marker='o', linewidth=2, label='Precio Estimado/Te√≥rico')
plt.axhline(y=valor_nominal, color='gray', linestyle='--', label='Valor Nominal ($1.000)')
plt.axhline(y=precio_actual_bono, color='darkred', linestyle='--', label=f'Precio Actual: ${precio_actual_bono}')
plt.axhline(y=precio_teorico_bono, color='green', linestyle='--', label=f'Precio Te√≥rico: ${precio_teorico_bono:.2f}')
plt.fill_between(df['Fecha'], df['Precio Estimado del Bono'], valor_nominal, color='blue', alpha=0.1)

plt.annotate(f"CY: {cy*100:.2f}%", (df['Fecha'].iloc[-1], precio_actual_bono + 15), color='darkred', fontsize=10)
plt.annotate(f"YTM: {ytm_aprox*100:.2f}%", (df['Fecha'].iloc[-1], precio_actual_bono - 40), color='green', fontsize=10)

plt.title('Evoluci√≥n y Valoraci√≥n del Bono de Tesla (2017‚Äì2025)', fontsize=15)
plt.xlabel('Fecha')
plt.ylabel('Precio del Bono (USD)')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ------------------------
# PARTE 7: MOSTRAR TABLA Y AN√ÅLISIS
# ------------------------

print("\n Resumen Financiero del Bono Tesla:")
print(resumen.to_string(index=False))

print("\nAn√°lisis del bono:")
print(f"El precio te√≥rico del bono, calculado con una tasa de descuento del 5%, es de ${precio_teorico_bono:.2f}.")
print(f"El precio actual de mercado es de ${precio_actual_bono:.2f}, lo que indica que el bono se encuentra ligeramente sobrevalorado respecto a su valor intr√≠nseco.")
print(f"El rendimiento corriente (CY) es de {cy*100:.2f}%, mientras que el rendimiento al vencimiento (YTM) aproximado es de {ytm_aprox*100:.2f}%.")
print("La comparaci√≥n entre estos indicadores sugiere que, a pesar de su precio sobre par, el bono sigue ofreciendo un retorno competitivo.")
print("Visualmente, la curva muestra c√≥mo el precio del bono converge hacia su valor nominal a medida que se acerca el vencimiento en 2025.")

"""# **2.- Acciones**"""

#2.- Acciones

 # Instalar yfinance
!pip install yfinance --upgrade --no-cache-dir
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Elegir y Descargar los datos de los √∫ltimos 5 a√±os con frecuencia semanal
ticker = "GOOG"
data = yf.download(ticker, period="5y", interval="1wk")

# Calcular la rentabilidad con los precios de cierre.
data['Rentabilidad'] = data['Close'].pct_change()
# Crear una tabla con m√°s detalles (precios de cierre, m√°ximos, m√≠nimos, etc.)
tabla = pd.concat([data['Close'], data['High'], data['Low'], data['Open'], data['Volume'], data['Rentabilidad']], axis=1)
tabla.columns = ['Close', 'High', 'Low', 'Open', 'Volume', 'Rentabilidad']
tabla['Ticker'] = ticker
tabla = tabla[['Ticker', 'Close', 'High', 'Low', 'Open', 'Volume', 'Rentabilidad']]

display(tabla)

# Realizar un resumen de la rentabilidad promedio y con su respectivo riesgo (desviaci√≥n est√°ndar).
rentabilidad_promedio = data['Rentabilidad'].mean()
riesgo = data['Rentabilidad'].std()

# Resumen
resumen = pd.DataFrame({
    'Rentabilidad Promedio': [rentabilidad_promedio],
    'Riesgo (Desviaci√≥n Est√°ndar)': [riesgo]
})

display(resumen)

# Imprimir la explicaci√≥n de rentabilidad y riesgo
print("\nRentabilidad Promedio: La rentabilidad promedio de la acci√≥n es {:.5f}, lo que indica que, en promedio, el valor de la acci√≥n ha subido un {:.3f}% semanalmente durante los √∫ltimos 5 a√±os. Este dato sugiere que la acci√≥n ha tenido un rendimiento positivo, aunque con fluctuaciones.".format(rentabilidad_promedio, rentabilidad_promedio * 100))
print("\nDesviaci√≥n Est√°ndar (Riesgo): El riesgo de la acci√≥n es {:.5f}, lo que indica que los precios de la acci√≥n tienen una volatilidad moderada. Un valor m√°s alto significar√≠a que los precios var√≠an m√°s, lo que implica mayor incertidumbre para los inversores.".format(riesgo))

# 5. Graficar la cotizaci√≥n del periodo se√±alado (en un gr√°fico de l√≠nea con los precios de cierre).
plt.figure(figsize=(14, 7))

# Graficar los precios de cierre
plt.plot(data['Close'], label='Precio de Cierre', color='b', linewidth=2)

# A√±adir una media m√≥vil de 50 semanas
data['SMA50'] = data['Close'].rolling(window=50).mean()
plt.plot(data['SMA50'], label='Media M√≥vil 50 Semanas', linestyle='--', color='r')

# A√±adir una media m√≥vil de 200 semanas
data['SMA200'] = data['Close'].rolling(window=200).mean()
plt.plot(data['SMA200'], label='Media M√≥vil 200 Semanas', linestyle='--', color='g')

# Obtener el precio m√°ximo y m√≠nimo y sus respectivas fechas
max_price = data['Close'].max()
min_price = data['Close'].min()

# Obtener las fechas correspondientes al m√°ximo y m√≠nimo (en formato datetime)
max_date = data['Close'].idxmax()  # El √≠ndice de la fecha con el precio m√°ximo
min_date = data['Close'].idxmin()  # El √≠ndice de la fecha con el precio m√≠nimo

# Asegurarnos de que las fechas sean valores individuales y no series
max_date_scalar = max_date.iloc[0]
min_date_scalar = min_date.iloc[0]

max_price_scalar = max_price.iloc[0]
min_price_scalar = min_price.iloc[0]

max_date_str = max_date_scalar.strftime('%Y-%m-%d')
min_date_str = min_date_scalar.strftime('%Y-%m-%d')


# Graficar los precios m√°ximos y m√≠nimos con etiquetas
plt.scatter(max_date_scalar, max_price_scalar, color='red', zorder=5, label=f'M√°ximo Precio: {max_price_scalar:.2f} en {max_date_str}')
plt.scatter(min_date_scalar, min_price_scalar, color='green', zorder=5, label=f'M√≠nimo Precio: {min_price_scalar:.2f} en {min_date_str}')

# A√±adir t√≠tulo, etiquetas y leyenda
plt.title(f'Cotizaci√≥n de {ticker} (√öltimos 5 a√±os)', fontsize=16)
plt.xlabel('Fecha', fontsize=12)
plt.ylabel('Precio de Cierre (USD)', fontsize=12)
plt.legend(loc='upper left', fontsize=10)
plt.grid(True)

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()

# Imprimir la explicaci√≥n del gr√°fico
print("\nComportamiento de la acci√≥n:")
print("El gr√°fico muestra una tendencia creciente en el precio de cierre de Google (GOOG) durante los √∫ltimos 5 a√±os, especialmente desde 2020, lo que sugiere un crecimiento impulsado por el √©xito en √°reas como tecnolog√≠a, publicidad y la nube.")
print("\nMedias M√≥viles:")
print("La MMA50 (l√≠nea roja) indica la tendencia a corto plazo y sugiere un momento alcista cuando est√° por encima del precio de cierre. La MMA200 (l√≠nea verde) refleja la tendencia a largo plazo, y un precio por encima de ella indica una tendencia positiva.")
print("\nPuntos m√°ximos y m√≠nimos:")
print(f"El punto m√°ximo (rojo) ocurri√≥ el {max_date_str} con {max_price_scalar:.2f} USD, posiblemente impulsado por un evento positivo.")
print(f"El punto m√≠nimo (verde) fue el {min_date_str} con {min_price_scalar:.2f} USD, afectado probablemente por la pandemia de COVID-19.")

"""# **3.- Futuros**"""

#3.- Futuros
import numpy as np
import matplotlib.pyplot as plt

# Datos iniciales
precio_futuro_inicial = 3.20  # Precio de futuros en enero (por libra)
precio_spot_enero = 3.40      # Precio spot del cobre en enero (por libra)
cantidad_cobre = 100000       # Cantidad total de cobre requerida (en libras)
contratos_futuro = 4          # N√∫mero de contratos de futuros

# Precio de cada contrato de futuros cubre 25,000 libras de cobre
cantidad_por_contrato = 25000

# Simulamos diferentes precios spot en mayo (puedes cambiar estos valores)
precios_spot_mayo = np.linspace(3.00, 3.60, 100)  # Valores de precios spot entre $3.00 y $3.60 por libra

# C√°lculo de las ganancias y p√©rdidas en los contratos de futuros
ganancias_futuros = (precios_spot_mayo - precio_futuro_inicial) * cantidad_cobre

# C√°lculo del costo total
costo_total = precios_spot_mayo * cantidad_cobre  # Costo si se compra el cobre al precio spot
costo_total_ajustado = costo_total + ganancias_futuros  # Costo total considerando la ganancia o p√©rdida

# Graficamos los resultados usando un gr√°fico de l√≠neas
plt.figure(figsize=(10, 6))

# Gr√°fico de la ganancia o p√©rdida de la cobertura
plt.plot(precios_spot_mayo, ganancias_futuros, label='Ganancia/P√©rdida de la Cobertura (Futuros)', color='blue')

# Graficamos el costo total ajustado con los futuros
plt.plot(precios_spot_mayo, costo_total_ajustado, label='Costo Total del Cobre', color='red', linestyle='--')

# A√±adimos etiquetas y t√≠tulo
plt.title('Impacto de la Cobertura de Futuros en el Precio del Cobre (Mayo)', fontsize=14)
plt.xlabel('Precio Spot del Cobre en Mayo (USD por libra)', fontsize=12)
plt.ylabel('USD', fontsize=12)
plt.axhline(0, color='black',linewidth=1)  # L√≠nea en cero para marcar el punto de equilibrio
plt.legend()

# Mostrar el gr√°fico
plt.tight_layout()
plt.grid(True)
plt.show()

# Mostrar las explicaciones de las ganancias y p√©rdidas
for precio, ganancia, costo in zip(precios_spot_mayo[::10], ganancias_futuros[::10], costo_total_ajustado[::10]):  # Muestra algunos puntos
    print(f"Si el precio spot en mayo es {precio:.2f} USD por libra:")
    print(f"  - Ganancia/P√©rdida de la cobertura en futuros: ${ganancia:.2f}")
    print(f"  - Costo total pagado por el cobre: ${costo:.2f}\n")

"""# **4.-Forward**
**Ejercicio 4: Precio de un Contrato Forward**

Sup√≥n que deseas calcular el precio a futuro de un contrato Forward sobre una acci√≥n de Apple Inc.. Los datos disponibles son los siguientes:

El precio spot de la acci√≥n de Apple (
ùëÜ
0
‚Äã
 ) es de 150 USD.

La tasa de inter√©s libre de riesgo (
ùëü) es del 5% anual.

El tiempo hasta el vencimiento (
ùëá) es de 1 a√±o.

"""

#4.-Forward
import numpy as np
import matplotlib.pyplot as plt

# Par√°metros del ejercicio
S0 = 150  # Precio spot de la acci√≥n (USD)
r = 0.05  # Tasa de inter√©s libre de riesgo (5%)
T = 1  # Tiempo hasta el vencimiento en a√±os

# C√°lculo del precio a futuro
F0 = S0 * np.exp(r * T)

# Mostrar el resultado
print(f"El precio a futuro del contrato forward es: ${F0:.2f}")

# Graficar el impacto del tiempo (T) sobre el precio a futuro (F0)
T_values = np.linspace(0.1, 5, 50)  # Variar el tiempo hasta el vencimiento (de 0.1 a 5 a√±os)
F0_values_time = S0 * np.exp(r * T_values)

# Graficar el impacto de la tasa de inter√©s (r) sobre el precio a futuro (F0)
r_values = np.linspace(0.01, 0.15, 50)  # Variar la tasa de inter√©s (de 1% a 15%)
F0_values_rate = S0 * np.exp(r_values * T)

# Crear el gr√°fico
plt.figure(figsize=(12, 6))

# Gr√°fico para el impacto del tiempo (T) en el precio a futuro
plt.subplot(1, 2, 1)
plt.plot(T_values, F0_values_time, label="Precio a futuro vs Tiempo")
plt.title('Impacto del Tiempo en el Precio a Futuro')
plt.xlabel('Tiempo hasta el vencimiento (a√±os)')
plt.ylabel('Precio a Futuro (USD)')
plt.grid(True)
plt.legend()

# Gr√°fico para el impacto de la tasa de inter√©s (r) en el precio a futuro
plt.subplot(1, 2, 2)
plt.plot(r_values, F0_values_rate, label="Precio a futuro vs Tasa de inter√©s", color='r')
plt.title('Impacto de la Tasa de Inter√©s en el Precio a Futuro')
plt.xlabel('Tasa de inter√©s libre de riesgo')
plt.ylabel('Precio a Futuro (USD)')
plt.grid(True)
plt.legend()

# Mostrar los gr√°ficos
plt.tight_layout()
plt.show()

"""# **5.- Opciones**

**Ejercicio 5:**


Un inversionista adquiere una opci√≥n de compra europea para comprar 100 acciones de una empresa.
El precio de ejercicio de la opci√≥n es de 100 USD, y el precio actual de la acci√≥n es de 98 USD.
El costo de la opci√≥n es de 5 USD por acci√≥n, lo que significa que la inversi√≥n inicial es de 500 USD
(100 acciones * 5 USD por acci√≥n).

El inversionista planea ejercer la opci√≥n √∫nicamente si el precio de la acci√≥n al vencimiento es mayor
que el precio de ejercicio de 100 USD. De lo contrario, la opci√≥n no se ejercer√°, y el inversionista perder√°
la inversi√≥n inicial de 500 USD.

Los par√°metros utilizados para calcular el valor te√≥rico de la opci√≥n mediante el modelo de Black-Scholes
son los siguientes:
- Tasa de inter√©s libre de riesgo (r) = 5%
- Volatilidad (œÉ) = 20%
- Tiempo hasta el vencimiento (T) = 4 meses (1/3 a√±os)
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Datos del problema
S0 = 98  # Precio actual de la acci√≥n (en USD)
K = 100  # Precio de ejercicio de la opci√≥n (en USD)
T = 1/3  # Tiempo hasta el vencimiento (en a√±os)
sigma = 0.20  # Volatilidad (20%)
r = 0.05  # Tasa de inter√©s libre de riesgo (5%)
precio_opcion = 5  # Precio de la opci√≥n (en USD)

# C√°lculos de Black-Scholes
d1 = (np.log(S0 / K) + (r + (sigma ** 2) / 2) * T) / (sigma * np.sqrt(T))
d2 = d1 - sigma * np.sqrt(T)

# Precio de la opci√≥n de compra seg√∫n Black-Scholes
C = S0 * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)

# Imprimir el resultado del precio de la opci√≥n
print(f"Precio de la opci√≥n de compra (Black-Scholes): {C:.2f} USD")

# Generaci√≥n de una gr√°fica para la utilidad neta
# Vamos a evaluar la utilidad neta para distintos precios al vencimiento de la acci√≥n
precios = np.linspace(80, 130, 100)  # Precio de la acci√≥n al vencimiento
utilidad = np.maximum(precios - K, 0) * 100 - 500  # Ganancia neta: (Precio al vencimiento - Precio ejercicio) * 100 - Inversi√≥n inicial

# Graficar
plt.figure(figsize=(10, 6))
plt.plot(precios, utilidad, label='Utilidad Neta')
plt.axhline(0, color='black',linewidth=1)
plt.title('Utilidad Neta de una Opci√≥n de Compra Europea')
plt.xlabel('Precio de la acci√≥n al vencimiento (USD)')
plt.ylabel('Utilidad Neta (USD)')
plt.grid(True)
plt.legend()
plt.show()

"""# **6.-Swap**

**Ejercicio 6:**

Un swap de tasas de inter√©s de $100 millones tiene una vida restante de 10 meses. Bajo los t√©rminos del swap,
la tasa LIBOR a seis meses se intercambia por una tasa de inter√©s de 7% anual (compuesta semestralmente). El promedio de la tasa de inter√©s de demanda
y oferta que se intercambia por la tasa LIBOR a seis meses en swaps de todos los vencimientos es actualmente de 5% anual con una composici√≥n continua.
La tasa LIBOR a seis meses fue de 4.6% anual hace dos meses.

¬øCu√°l es el valor actual del swap para la parte que paga la tasa variable?
¬øCu√°l es su valor para la parte que paga la tasa fija?
"""

import numpy as np
import matplotlib.pyplot as plt

# Par√°metros
notional = 100  # en millones
fixed_rate = 0.07
libor_prev = 0.046
market_rate = 0.05  # tasa continua de mercado
payment_times = [4/12, 10/12]  # en a√±os

# C√°lculo de flujos fijos
fixed_flows = [notional * fixed_rate * 0.5] * 2
fixed_flows[-1] += notional  # agregar el principal en el √∫ltimo pago

# C√°lculo de factores de descuento
discount_factors = [np.exp(-market_rate * t) for t in payment_times]

# Valor del bono fijo
B_fixed = sum(cf * df for cf, df in zip(fixed_flows, discount_factors))

# Valor del bono variable (solo el primer flujo es relevante y ya conocido)
k_star = notional * libor_prev * 0.5
B_variable = (notional + k_star) * np.exp(-market_rate * payment_times[0])

# Valor del swap
V_swap = B_fixed - B_variable

# Resultados
print(f"Valor del bono fijo: {B_fixed:.3f} millones")
print(f"Valor del bono variable: {B_variable:.3f} millones")
print(f"Valor del swap para quien paga tasa variable: {V_swap:.3f} millones")
print(f"Valor del swap para quien paga tasa fija: {-V_swap:.3f} millones")

# Gr√°fica de beneficios del swap
partes = ["Paga Variable\n(Recibe Fija)", "Paga Fija\n(Recibe Variable)"]
beneficios = [V_swap, -V_swap]
colores = ["green" if b >= 0 else "red" for b in beneficios]

plt.bar(partes, beneficios, color=colores)
plt.axhline(0, color='black', linewidth=0.8)
plt.ylabel("Valor del swap (millones de USD)")
plt.title("Beneficios del Swap seg√∫n la parte contratante")
plt.grid(axis='y')
plt.show()

"""# **7.-FRA**

**Ejercicio 7:**

Si asumimos que las tasas cero son iguales a las que se presentan en el problema 4.5,
¬øcu√°l es el valor de un FRA que permite al tenedor ganar 9.5% durante un periodo de tres meses, el cual comienza dentro de un a√±o,
sobre un principal de $1,000,000? La tasa de inter√©s se expresa con una composici√≥n trimestral.
"""

import numpy as np
import matplotlib.pyplot as plt

# Par√°metros del FRA
L = 1_000_000               # Principal
RK = 0.095                  # Tasa fija acordada
RF_trim = 0.09102           # Tasa a plazo con comp. trimestral
R2_enunciado = 0.086        # Tasa cero (para descuento)
T1 = 1.0                    # Inicio del FRA
T2 = 1.25                   # Fin del FRA
tau = T2 - T1

# Valor del FRA
valor_fra = (L * tau * (RK - RF_trim)) * np.exp(-R2_enunciado * T2)
print(f"Valor del FRA: ${valor_fra:,.2f}")

# Simulaci√≥n de evoluci√≥n de tasas a 10 a√±os
a√±os = np.linspace(0.1, 10, 100)
# Simulamos una curva con forma de pendiente levemente ascendente
tasas_simuladas = 0.07 + 0.002 * np.log1p(a√±os)  # Ejemplo: curva creciente

# A√±adimos los puntos del FRA (RK y RF)
plt.figure(figsize=(12, 6))
plt.plot(a√±os, tasas_simuladas * 100, label="Curva de tasas simulada", color="midnightblue", linewidth=2)
plt.axvline(T1, color="gray", linestyle="--", alpha=0.6, label="Inicio del FRA (T1)")
plt.axvline(T2, color="gray", linestyle="--", alpha=0.6, label="Fin del FRA (T2)")
plt.scatter([T2], [RK * 100], color="darkorange", label="Tasa Acordada (RK)", zorder=5, s=100, edgecolor="black")
plt.scatter([T2], [RF_trim * 100], color="dodgerblue", label="Tasa a Plazo (RF)", zorder=5, s=100, edgecolor="black")

# Est√©tica del gr√°fico
plt.title("Evoluci√≥n de tasas a 10 a√±os con foco en FRA", fontsize=16, weight="bold")
plt.xlabel("Tiempo (a√±os)", fontsize=12)
plt.ylabel("Tasa anual (%)", fontsize=12)
plt.legend(loc="upper left", fontsize=10)
plt.grid(True, linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()
